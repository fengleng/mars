// Code generated by protoc-gen-go-mars-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-mars-http v1.0.0
// - protoc             v3.6.1
// source: t1.proto

package t1

import (
	context "context"
	http "github.com/fengleng/mars/transport/http"
	binding "github.com/fengleng/mars/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the mars package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationT1CreateT1 = "/t1.T1/CreateT1"
const OperationT1DeleteT1 = "/t1.T1/DeleteT1"
const OperationT1GetT1 = "/t1.T1/GetT1"
const OperationT1ListT1 = "/t1.T1/ListT1"
const OperationT1UpdateT1 = "/t1.T1/UpdateT1"

type T1HTTPServer interface {
	CreateT1(context.Context, *CreateT1Req) (*CreateT1Rsp, error)
	DeleteT1(context.Context, *DeleteT1Req) (*DeleteT1Rsp, error)
	GetT1(context.Context, *GetT1Req) (*GetT1Rsp, error)
	ListT1(context.Context, *ListT1Req) (*ListT1Rsp, error)
	UpdateT1(context.Context, *UpdateT1Req) (*UpdateT1Rsp, error)
}

func RegisterT1HTTPServer(s *http.Server, srv T1HTTPServer) {
	r := s.Route("/")
	r.POST("/t1.T1/CreateT1", _T1_CreateT10_HTTP_Handler(srv))
	r.POST("/t1.T1/UpdateT1", _T1_UpdateT10_HTTP_Handler(srv))
	r.POST("/t1.T1/DeleteT1", _T1_DeleteT10_HTTP_Handler(srv))
	r.POST("/t1.T1/GetT1", _T1_GetT10_HTTP_Handler(srv))
	r.POST("/t1.T1/ListT1", _T1_ListT10_HTTP_Handler(srv))
}

func _T1_CreateT10_HTTP_Handler(srv T1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateT1Req
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationT1CreateT1)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateT1(ctx, req.(*CreateT1Req))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateT1Rsp)
		return ctx.Result(200, reply)
	}
}

func _T1_UpdateT10_HTTP_Handler(srv T1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateT1Req
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationT1UpdateT1)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateT1(ctx, req.(*UpdateT1Req))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateT1Rsp)
		return ctx.Result(200, reply)
	}
}

func _T1_DeleteT10_HTTP_Handler(srv T1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteT1Req
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationT1DeleteT1)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteT1(ctx, req.(*DeleteT1Req))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteT1Rsp)
		return ctx.Result(200, reply)
	}
}

func _T1_GetT10_HTTP_Handler(srv T1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetT1Req
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationT1GetT1)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetT1(ctx, req.(*GetT1Req))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetT1Rsp)
		return ctx.Result(200, reply)
	}
}

func _T1_ListT10_HTTP_Handler(srv T1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListT1Req
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationT1ListT1)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListT1(ctx, req.(*ListT1Req))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListT1Rsp)
		return ctx.Result(200, reply)
	}
}

type T1HTTPClient interface {
	CreateT1(ctx context.Context, req *CreateT1Req, opts ...http.CallOption) (rsp *CreateT1Rsp, err error)
	DeleteT1(ctx context.Context, req *DeleteT1Req, opts ...http.CallOption) (rsp *DeleteT1Rsp, err error)
	GetT1(ctx context.Context, req *GetT1Req, opts ...http.CallOption) (rsp *GetT1Rsp, err error)
	ListT1(ctx context.Context, req *ListT1Req, opts ...http.CallOption) (rsp *ListT1Rsp, err error)
	UpdateT1(ctx context.Context, req *UpdateT1Req, opts ...http.CallOption) (rsp *UpdateT1Rsp, err error)
}

type T1HTTPClientImpl struct {
	cc *http.Client
}

func NewT1HTTPClient(client *http.Client) T1HTTPClient {
	return &T1HTTPClientImpl{client}
}

func (c *T1HTTPClientImpl) CreateT1(ctx context.Context, in *CreateT1Req, opts ...http.CallOption) (*CreateT1Rsp, error) {
	var out CreateT1Rsp
	pattern := "/t1.T1/CreateT1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationT1CreateT1))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *T1HTTPClientImpl) DeleteT1(ctx context.Context, in *DeleteT1Req, opts ...http.CallOption) (*DeleteT1Rsp, error) {
	var out DeleteT1Rsp
	pattern := "/t1.T1/DeleteT1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationT1DeleteT1))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *T1HTTPClientImpl) GetT1(ctx context.Context, in *GetT1Req, opts ...http.CallOption) (*GetT1Rsp, error) {
	var out GetT1Rsp
	pattern := "/t1.T1/GetT1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationT1GetT1))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *T1HTTPClientImpl) ListT1(ctx context.Context, in *ListT1Req, opts ...http.CallOption) (*ListT1Rsp, error) {
	var out ListT1Rsp
	pattern := "/t1.T1/ListT1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationT1ListT1))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *T1HTTPClientImpl) UpdateT1(ctx context.Context, in *UpdateT1Req, opts ...http.CallOption) (*UpdateT1Rsp, error) {
	var out UpdateT1Rsp
	pattern := "/t1.T1/UpdateT1"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationT1UpdateT1))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
