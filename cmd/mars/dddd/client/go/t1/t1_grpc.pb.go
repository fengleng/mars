// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: t1.proto

package t1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// T1Client is the client API for T1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type T1Client interface {
	CreateT1(ctx context.Context, in *CreateT1Req, opts ...grpc.CallOption) (*CreateT1Rsp, error)
	UpdateT1(ctx context.Context, in *UpdateT1Req, opts ...grpc.CallOption) (*UpdateT1Rsp, error)
	DeleteT1(ctx context.Context, in *DeleteT1Req, opts ...grpc.CallOption) (*DeleteT1Rsp, error)
	GetT1(ctx context.Context, in *GetT1Req, opts ...grpc.CallOption) (*GetT1Rsp, error)
	ListT1(ctx context.Context, opts ...grpc.CallOption) (T1_ListT1Client, error)
}

type t1Client struct {
	cc grpc.ClientConnInterface
}

func NewT1Client(cc grpc.ClientConnInterface) T1Client {
	return &t1Client{cc}
}

func (c *t1Client) CreateT1(ctx context.Context, in *CreateT1Req, opts ...grpc.CallOption) (*CreateT1Rsp, error) {
	out := new(CreateT1Rsp)
	err := c.cc.Invoke(ctx, "/t1.T1/CreateT1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t1Client) UpdateT1(ctx context.Context, in *UpdateT1Req, opts ...grpc.CallOption) (*UpdateT1Rsp, error) {
	out := new(UpdateT1Rsp)
	err := c.cc.Invoke(ctx, "/t1.T1/UpdateT1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t1Client) DeleteT1(ctx context.Context, in *DeleteT1Req, opts ...grpc.CallOption) (*DeleteT1Rsp, error) {
	out := new(DeleteT1Rsp)
	err := c.cc.Invoke(ctx, "/t1.T1/DeleteT1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t1Client) GetT1(ctx context.Context, in *GetT1Req, opts ...grpc.CallOption) (*GetT1Rsp, error) {
	out := new(GetT1Rsp)
	err := c.cc.Invoke(ctx, "/t1.T1/GetT1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t1Client) ListT1(ctx context.Context, opts ...grpc.CallOption) (T1_ListT1Client, error) {
	stream, err := c.cc.NewStream(ctx, &T1_ServiceDesc.Streams[0], "/t1.T1/ListT1", opts...)
	if err != nil {
		return nil, err
	}
	x := &t1ListT1Client{stream}
	return x, nil
}

type T1_ListT1Client interface {
	Send(*ListT1Req) error
	CloseAndRecv() (*ListT1Rsp, error)
	grpc.ClientStream
}

type t1ListT1Client struct {
	grpc.ClientStream
}

func (x *t1ListT1Client) Send(m *ListT1Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *t1ListT1Client) CloseAndRecv() (*ListT1Rsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListT1Rsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// T1Server is the server API for T1 service.
// All implementations must embed UnimplementedT1Server
// for forward compatibility
type T1Server interface {
	CreateT1(context.Context, *CreateT1Req) (*CreateT1Rsp, error)
	UpdateT1(context.Context, *UpdateT1Req) (*UpdateT1Rsp, error)
	DeleteT1(context.Context, *DeleteT1Req) (*DeleteT1Rsp, error)
	GetT1(context.Context, *GetT1Req) (*GetT1Rsp, error)
	ListT1(T1_ListT1Server) error
	mustEmbedUnimplementedT1Server()
}

// UnimplementedT1Server must be embedded to have forward compatible implementations.
type UnimplementedT1Server struct {
}

func (UnimplementedT1Server) CreateT1(context.Context, *CreateT1Req) (*CreateT1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateT1 not implemented")
}
func (UnimplementedT1Server) UpdateT1(context.Context, *UpdateT1Req) (*UpdateT1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateT1 not implemented")
}
func (UnimplementedT1Server) DeleteT1(context.Context, *DeleteT1Req) (*DeleteT1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteT1 not implemented")
}
func (UnimplementedT1Server) GetT1(context.Context, *GetT1Req) (*GetT1Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetT1 not implemented")
}
func (UnimplementedT1Server) ListT1(T1_ListT1Server) error {
	return status.Errorf(codes.Unimplemented, "method ListT1 not implemented")
}
func (UnimplementedT1Server) mustEmbedUnimplementedT1Server() {}

// UnsafeT1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to T1Server will
// result in compilation errors.
type UnsafeT1Server interface {
	mustEmbedUnimplementedT1Server()
}

func RegisterT1Server(s grpc.ServiceRegistrar, srv T1Server) {
	s.RegisterService(&T1_ServiceDesc, srv)
}

func _T1_CreateT1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateT1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T1Server).CreateT1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t1.T1/CreateT1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T1Server).CreateT1(ctx, req.(*CreateT1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T1_UpdateT1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateT1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T1Server).UpdateT1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t1.T1/UpdateT1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T1Server).UpdateT1(ctx, req.(*UpdateT1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T1_DeleteT1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteT1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T1Server).DeleteT1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t1.T1/DeleteT1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T1Server).DeleteT1(ctx, req.(*DeleteT1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T1_GetT1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetT1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T1Server).GetT1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t1.T1/GetT1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T1Server).GetT1(ctx, req.(*GetT1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T1_ListT1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(T1Server).ListT1(&t1ListT1Server{stream})
}

type T1_ListT1Server interface {
	SendAndClose(*ListT1Rsp) error
	Recv() (*ListT1Req, error)
	grpc.ServerStream
}

type t1ListT1Server struct {
	grpc.ServerStream
}

func (x *t1ListT1Server) SendAndClose(m *ListT1Rsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *t1ListT1Server) Recv() (*ListT1Req, error) {
	m := new(ListT1Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// T1_ServiceDesc is the grpc.ServiceDesc for T1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var T1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "t1.T1",
	HandlerType: (*T1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateT1",
			Handler:    _T1_CreateT1_Handler,
		},
		{
			MethodName: "UpdateT1",
			Handler:    _T1_UpdateT1_Handler,
		},
		{
			MethodName: "DeleteT1",
			Handler:    _T1_DeleteT1_Handler,
		},
		{
			MethodName: "GetT1",
			Handler:    _T1_GetT1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListT1",
			Handler:       _T1_ListT1_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "t1.proto",
}
