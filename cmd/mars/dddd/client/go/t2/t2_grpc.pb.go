// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: t2.proto

package t2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// T2Client is the client API for T2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type T2Client interface {
	CreateT2(ctx context.Context, in *CreateT2Req, opts ...grpc.CallOption) (*CreateT2Rsp, error)
	UpdateT2(ctx context.Context, in *UpdateT2Req, opts ...grpc.CallOption) (*UpdateT2Rsp, error)
	DeleteT2(ctx context.Context, in *DeleteT2Req, opts ...grpc.CallOption) (*DeleteT2Rsp, error)
	GetT2(ctx context.Context, in *GetT2Req, opts ...grpc.CallOption) (*GetT2Rsp, error)
	ListT2(ctx context.Context, in *ListT2Req, opts ...grpc.CallOption) (*ListT2Rsp, error)
}

type t2Client struct {
	cc grpc.ClientConnInterface
}

func NewT2Client(cc grpc.ClientConnInterface) T2Client {
	return &t2Client{cc}
}

func (c *t2Client) CreateT2(ctx context.Context, in *CreateT2Req, opts ...grpc.CallOption) (*CreateT2Rsp, error) {
	out := new(CreateT2Rsp)
	err := c.cc.Invoke(ctx, "/t2.T2/CreateT2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t2Client) UpdateT2(ctx context.Context, in *UpdateT2Req, opts ...grpc.CallOption) (*UpdateT2Rsp, error) {
	out := new(UpdateT2Rsp)
	err := c.cc.Invoke(ctx, "/t2.T2/UpdateT2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t2Client) DeleteT2(ctx context.Context, in *DeleteT2Req, opts ...grpc.CallOption) (*DeleteT2Rsp, error) {
	out := new(DeleteT2Rsp)
	err := c.cc.Invoke(ctx, "/t2.T2/DeleteT2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t2Client) GetT2(ctx context.Context, in *GetT2Req, opts ...grpc.CallOption) (*GetT2Rsp, error) {
	out := new(GetT2Rsp)
	err := c.cc.Invoke(ctx, "/t2.T2/GetT2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t2Client) ListT2(ctx context.Context, in *ListT2Req, opts ...grpc.CallOption) (*ListT2Rsp, error) {
	out := new(ListT2Rsp)
	err := c.cc.Invoke(ctx, "/t2.T2/ListT2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// T2Server is the server API for T2 service.
// All implementations must embed UnimplementedT2Server
// for forward compatibility
type T2Server interface {
	CreateT2(context.Context, *CreateT2Req) (*CreateT2Rsp, error)
	UpdateT2(context.Context, *UpdateT2Req) (*UpdateT2Rsp, error)
	DeleteT2(context.Context, *DeleteT2Req) (*DeleteT2Rsp, error)
	GetT2(context.Context, *GetT2Req) (*GetT2Rsp, error)
	ListT2(context.Context, *ListT2Req) (*ListT2Rsp, error)
	mustEmbedUnimplementedT2Server()
}

// UnimplementedT2Server must be embedded to have forward compatible implementations.
type UnimplementedT2Server struct {
}

func (UnimplementedT2Server) CreateT2(context.Context, *CreateT2Req) (*CreateT2Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateT2 not implemented")
}
func (UnimplementedT2Server) UpdateT2(context.Context, *UpdateT2Req) (*UpdateT2Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateT2 not implemented")
}
func (UnimplementedT2Server) DeleteT2(context.Context, *DeleteT2Req) (*DeleteT2Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteT2 not implemented")
}
func (UnimplementedT2Server) GetT2(context.Context, *GetT2Req) (*GetT2Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetT2 not implemented")
}
func (UnimplementedT2Server) ListT2(context.Context, *ListT2Req) (*ListT2Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListT2 not implemented")
}
func (UnimplementedT2Server) mustEmbedUnimplementedT2Server() {}

// UnsafeT2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to T2Server will
// result in compilation errors.
type UnsafeT2Server interface {
	mustEmbedUnimplementedT2Server()
}

func RegisterT2Server(s grpc.ServiceRegistrar, srv T2Server) {
	s.RegisterService(&T2_ServiceDesc, srv)
}

func _T2_CreateT2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateT2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2Server).CreateT2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t2.T2/CreateT2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2Server).CreateT2(ctx, req.(*CreateT2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T2_UpdateT2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateT2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2Server).UpdateT2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t2.T2/UpdateT2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2Server).UpdateT2(ctx, req.(*UpdateT2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T2_DeleteT2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteT2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2Server).DeleteT2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t2.T2/DeleteT2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2Server).DeleteT2(ctx, req.(*DeleteT2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T2_GetT2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetT2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2Server).GetT2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t2.T2/GetT2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2Server).GetT2(ctx, req.(*GetT2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _T2_ListT2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListT2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2Server).ListT2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/t2.T2/ListT2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2Server).ListT2(ctx, req.(*ListT2Req))
	}
	return interceptor(ctx, in, info, handler)
}

// T2_ServiceDesc is the grpc.ServiceDesc for T2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var T2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "t2.T2",
	HandlerType: (*T2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateT2",
			Handler:    _T2_CreateT2_Handler,
		},
		{
			MethodName: "UpdateT2",
			Handler:    _T2_UpdateT2_Handler,
		},
		{
			MethodName: "DeleteT2",
			Handler:    _T2_DeleteT2_Handler,
		},
		{
			MethodName: "GetT2",
			Handler:    _T2_GetT2_Handler,
		},
		{
			MethodName: "ListT2",
			Handler:    _T2_ListT2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t2.proto",
}
