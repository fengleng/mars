// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: t2.proto

package t2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateT2Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateT2ReqMultiError, or
// nil if none found.
func (m *CreateT2Req) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateT2Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateHostname(m.GetF1()); err != nil {
		if ip := net.ParseIP(m.GetF1()); ip == nil {
			err := CreateT2ReqValidationError{
				field:  "F1",
				reason: "value must be a valid hostname, or ip address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return CreateT2ReqMultiError(errors)
	}

	return nil
}

func (m *CreateT2Req) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// CreateT2ReqMultiError is an error wrapping multiple validation errors
// returned by CreateT2Req.ValidateAll() if the designated constraints aren't met.
type CreateT2ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateT2ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateT2ReqMultiError) AllErrors() []error { return m }

// CreateT2ReqValidationError is the validation error returned by
// CreateT2Req.Validate if the designated constraints aren't met.
type CreateT2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateT2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateT2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateT2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateT2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateT2ReqValidationError) ErrorName() string { return "CreateT2ReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateT2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateT2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateT2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateT2ReqValidationError{}

// Validate checks the field values on CreateT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateT2Rsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateT2RspMultiError, or
// nil if none found.
func (m *CreateT2Rsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateT2Rsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateT2RspMultiError(errors)
	}

	return nil
}

// CreateT2RspMultiError is an error wrapping multiple validation errors
// returned by CreateT2Rsp.ValidateAll() if the designated constraints aren't met.
type CreateT2RspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateT2RspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateT2RspMultiError) AllErrors() []error { return m }

// CreateT2RspValidationError is the validation error returned by
// CreateT2Rsp.Validate if the designated constraints aren't met.
type CreateT2RspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateT2RspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateT2RspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateT2RspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateT2RspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateT2RspValidationError) ErrorName() string { return "CreateT2RspValidationError" }

// Error satisfies the builtin error interface
func (e CreateT2RspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateT2Rsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateT2RspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateT2RspValidationError{}

// Validate checks the field values on UpdateT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateT2Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateT2ReqMultiError, or
// nil if none found.
func (m *UpdateT2Req) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateT2Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateT2ReqMultiError(errors)
	}

	return nil
}

// UpdateT2ReqMultiError is an error wrapping multiple validation errors
// returned by UpdateT2Req.ValidateAll() if the designated constraints aren't met.
type UpdateT2ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateT2ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateT2ReqMultiError) AllErrors() []error { return m }

// UpdateT2ReqValidationError is the validation error returned by
// UpdateT2Req.Validate if the designated constraints aren't met.
type UpdateT2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateT2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateT2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateT2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateT2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateT2ReqValidationError) ErrorName() string { return "UpdateT2ReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateT2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateT2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateT2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateT2ReqValidationError{}

// Validate checks the field values on UpdateT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateT2Rsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateT2RspMultiError, or
// nil if none found.
func (m *UpdateT2Rsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateT2Rsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateT2RspMultiError(errors)
	}

	return nil
}

// UpdateT2RspMultiError is an error wrapping multiple validation errors
// returned by UpdateT2Rsp.ValidateAll() if the designated constraints aren't met.
type UpdateT2RspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateT2RspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateT2RspMultiError) AllErrors() []error { return m }

// UpdateT2RspValidationError is the validation error returned by
// UpdateT2Rsp.Validate if the designated constraints aren't met.
type UpdateT2RspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateT2RspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateT2RspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateT2RspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateT2RspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateT2RspValidationError) ErrorName() string { return "UpdateT2RspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateT2RspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateT2Rsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateT2RspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateT2RspValidationError{}

// Validate checks the field values on DeleteT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteT2Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteT2ReqMultiError, or
// nil if none found.
func (m *DeleteT2Req) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteT2Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteT2ReqMultiError(errors)
	}

	return nil
}

// DeleteT2ReqMultiError is an error wrapping multiple validation errors
// returned by DeleteT2Req.ValidateAll() if the designated constraints aren't met.
type DeleteT2ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteT2ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteT2ReqMultiError) AllErrors() []error { return m }

// DeleteT2ReqValidationError is the validation error returned by
// DeleteT2Req.Validate if the designated constraints aren't met.
type DeleteT2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteT2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteT2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteT2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteT2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteT2ReqValidationError) ErrorName() string { return "DeleteT2ReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteT2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteT2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteT2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteT2ReqValidationError{}

// Validate checks the field values on DeleteT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteT2Rsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteT2RspMultiError, or
// nil if none found.
func (m *DeleteT2Rsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteT2Rsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteT2RspMultiError(errors)
	}

	return nil
}

// DeleteT2RspMultiError is an error wrapping multiple validation errors
// returned by DeleteT2Rsp.ValidateAll() if the designated constraints aren't met.
type DeleteT2RspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteT2RspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteT2RspMultiError) AllErrors() []error { return m }

// DeleteT2RspValidationError is the validation error returned by
// DeleteT2Rsp.Validate if the designated constraints aren't met.
type DeleteT2RspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteT2RspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteT2RspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteT2RspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteT2RspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteT2RspValidationError) ErrorName() string { return "DeleteT2RspValidationError" }

// Error satisfies the builtin error interface
func (e DeleteT2RspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteT2Rsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteT2RspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteT2RspValidationError{}

// Validate checks the field values on GetT2Req with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetT2Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetT2ReqMultiError, or nil
// if none found.
func (m *GetT2Req) ValidateAll() error {
	return m.validate(true)
}

func (m *GetT2Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetT2ReqMultiError(errors)
	}

	return nil
}

// GetT2ReqMultiError is an error wrapping multiple validation errors returned
// by GetT2Req.ValidateAll() if the designated constraints aren't met.
type GetT2ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetT2ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetT2ReqMultiError) AllErrors() []error { return m }

// GetT2ReqValidationError is the validation error returned by
// GetT2Req.Validate if the designated constraints aren't met.
type GetT2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetT2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetT2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetT2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetT2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetT2ReqValidationError) ErrorName() string { return "GetT2ReqValidationError" }

// Error satisfies the builtin error interface
func (e GetT2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetT2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetT2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetT2ReqValidationError{}

// Validate checks the field values on GetT2Rsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetT2Rsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetT2RspMultiError, or nil
// if none found.
func (m *GetT2Rsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetT2Rsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetT2RspMultiError(errors)
	}

	return nil
}

// GetT2RspMultiError is an error wrapping multiple validation errors returned
// by GetT2Rsp.ValidateAll() if the designated constraints aren't met.
type GetT2RspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetT2RspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetT2RspMultiError) AllErrors() []error { return m }

// GetT2RspValidationError is the validation error returned by
// GetT2Rsp.Validate if the designated constraints aren't met.
type GetT2RspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetT2RspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetT2RspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetT2RspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetT2RspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetT2RspValidationError) ErrorName() string { return "GetT2RspValidationError" }

// Error satisfies the builtin error interface
func (e GetT2RspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetT2Rsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetT2RspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetT2RspValidationError{}

// Validate checks the field values on ListT2Req with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListT2Req) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListT2Req with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListT2ReqMultiError, or nil
// if none found.
func (m *ListT2Req) ValidateAll() error {
	return m.validate(true)
}

func (m *ListT2Req) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListT2ReqMultiError(errors)
	}

	return nil
}

// ListT2ReqMultiError is an error wrapping multiple validation errors returned
// by ListT2Req.ValidateAll() if the designated constraints aren't met.
type ListT2ReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListT2ReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListT2ReqMultiError) AllErrors() []error { return m }

// ListT2ReqValidationError is the validation error returned by
// ListT2Req.Validate if the designated constraints aren't met.
type ListT2ReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListT2ReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListT2ReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListT2ReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListT2ReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListT2ReqValidationError) ErrorName() string { return "ListT2ReqValidationError" }

// Error satisfies the builtin error interface
func (e ListT2ReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListT2Req.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListT2ReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListT2ReqValidationError{}

// Validate checks the field values on ListT2Rsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListT2Rsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListT2Rsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListT2RspMultiError, or nil
// if none found.
func (m *ListT2Rsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListT2Rsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListT2RspMultiError(errors)
	}

	return nil
}

// ListT2RspMultiError is an error wrapping multiple validation errors returned
// by ListT2Rsp.ValidateAll() if the designated constraints aren't met.
type ListT2RspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListT2RspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListT2RspMultiError) AllErrors() []error { return m }

// ListT2RspValidationError is the validation error returned by
// ListT2Rsp.Validate if the designated constraints aren't met.
type ListT2RspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListT2RspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListT2RspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListT2RspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListT2RspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListT2RspValidationError) ErrorName() string { return "ListT2RspValidationError" }

// Error satisfies the builtin error interface
func (e ListT2RspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListT2Rsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListT2RspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListT2RspValidationError{}

// Validate checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Person) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PersonMultiError, or nil if none found.
func (m *Person) ValidateAll() error {
	return m.validate(true)
}

func (m *Person) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 999 {
		err := PersonValidationError{
			field:  "Id",
			reason: "value must be greater than 999",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = PersonValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetName()) > 256 {
		err := PersonValidationError{
			field:  "Name",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Person_Name_Pattern.MatchString(m.GetName()) {
		err := PersonValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHome() == nil {
		err := PersonValidationError{
			field:  "Home",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersonValidationError{
					field:  "Home",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersonValidationError{
					field:  "Home",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersonValidationError{
				field:  "Home",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PersonMultiError(errors)
	}

	return nil
}

func (m *Person) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Person) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// PersonMultiError is an error wrapping multiple validation errors returned by
// Person.ValidateAll() if the designated constraints aren't met.
type PersonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonMultiError) AllErrors() []error { return m }

// PersonValidationError is the validation error returned by Person.Validate if
// the designated constraints aren't met.
type PersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonValidationError) ErrorName() string { return "PersonValidationError" }

// Error satisfies the builtin error interface
func (e PersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonValidationError{}

var _Person_Name_Pattern = regexp.MustCompile("^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$")

// Validate checks the field values on Person_Location with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Person_Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Person_Location with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Person_LocationMultiError, or nil if none found.
func (m *Person_Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Person_Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLat(); val < -90 || val > 90 {
		err := Person_LocationValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLng(); val < -180 || val > 180 {
		err := Person_LocationValidationError{
			field:  "Lng",
			reason: "value must be inside range [-180, 180]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Person_LocationMultiError(errors)
	}

	return nil
}

// Person_LocationMultiError is an error wrapping multiple validation errors
// returned by Person_Location.ValidateAll() if the designated constraints
// aren't met.
type Person_LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Person_LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Person_LocationMultiError) AllErrors() []error { return m }

// Person_LocationValidationError is the validation error returned by
// Person_Location.Validate if the designated constraints aren't met.
type Person_LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Person_LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Person_LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Person_LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Person_LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Person_LocationValidationError) ErrorName() string { return "Person_LocationValidationError" }

// Error satisfies the builtin error interface
func (e Person_LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson_Location.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Person_LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Person_LocationValidationError{}
